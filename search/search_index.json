{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home What is Fosscord? Fosscord is a free open source self-hostable discord compatible chat, voice and video platform. Philosophy Fosscord aims to be a full one-on-one clone of Discord, adding more features that can be used as a replacement for the official client and still connect to discord.com and host private Fosscord server instances. Fosscord aims to give the best possible user experience, while being backwards compatible to Discord's features and adding new ones/improving old ones while maintaining the user privacy with end-to-end encryption support. The client can connect to multiple server instances without the need to open it multiple times. The client should be extensible through a secure Plugin and Theme System with own store. The server should be extensible through bots, just like discord without the need to change anything except the api endpoint. The project is open source so everyone can have a look what's going on under the hood and can be maintained and expanded by the community. Everything is configurable in the server config and everyone can add their own features, so that it is not opinionated. Concept Why backwards compatible to Discord? Benefit from the large user base of discord -> more users, making the switch easier for new users & keeping workflows intact and easily migrating existing discord bots No disadvantage for the users who use fosscord, so that they can still communicate with all their peers who use discord Discord has already built a great and stable protocol (don't reinvent the wheel) The community can extend and customize their clients and servers by self-hosting them and developing and installing addons Support Discord server Once we are finished, we'll host our own instance to host the support server.","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#what-is-fosscord","text":"Fosscord is a free open source self-hostable discord compatible chat, voice and video platform.","title":"What is Fosscord?"},{"location":"#philosophy","text":"Fosscord aims to be a full one-on-one clone of Discord, adding more features that can be used as a replacement for the official client and still connect to discord.com and host private Fosscord server instances. Fosscord aims to give the best possible user experience, while being backwards compatible to Discord's features and adding new ones/improving old ones while maintaining the user privacy with end-to-end encryption support. The client can connect to multiple server instances without the need to open it multiple times. The client should be extensible through a secure Plugin and Theme System with own store. The server should be extensible through bots, just like discord without the need to change anything except the api endpoint. The project is open source so everyone can have a look what's going on under the hood and can be maintained and expanded by the community. Everything is configurable in the server config and everyone can add their own features, so that it is not opinionated.","title":"Philosophy"},{"location":"#concept","text":"","title":"Concept"},{"location":"#why-backwards-compatible-to-discord","text":"Benefit from the large user base of discord -> more users, making the switch easier for new users & keeping workflows intact and easily migrating existing discord bots No disadvantage for the users who use fosscord, so that they can still communicate with all their peers who use discord Discord has already built a great and stable protocol (don't reinvent the wheel) The community can extend and customize their clients and servers by self-hosting them and developing and installing addons","title":"Why backwards compatible to Discord?"},{"location":"#support","text":"Discord server Once we are finished, we'll host our own instance to host the support server.","title":"Support"},{"location":"resources/","text":"Links Documentation Roadmap (Notion to-do board synced with GitHub issues) Status (Status page of the official fosscord instance) GitHub (GitHub organization) OpenCollective (Financially support the project to cover server costs and other expenses) Discord server (for support & organization (If we are finished we'll host our own support server)) Tor Hidden Service (Official Fosscord instance on TOR) Project structure Fosscord consists of many repositories, which together make up the client and server: Server fosscord-server is the complete Fosscord Server and it Contains: api a HTTP REST server gateway a WebSocket Gateway server rtc a C++ webRTC server for voice and video sharing. webRTC-server a javascript webRTC server for voice and video communication dashboard An admin dashboard for the server (analytics, settings, administration, trust & safety) util contains all shared logic like Database Models, Utility functions... cdn is the content-delivery-content (CDN) that stores user uploaded images. Client fosscord-ui is a user interface framework in the style of discord. fosscord-themes contains all the official themes for the client. fosscord-plugins contains all the official plugins for the client. fosscord-client is the official (react)-native Fosscord client. ~~ fosscord-web-client was an effort to develop a fosscord web client.~~ (Discontinued) ~~ react-native-withcss CSS support for react native~~ (Discontinued) ~~ css-mediaquery CSS media query support for react native~~ (Discontinued) Others fosscord-docs Documentation of Fosscord fosscord-landingpage represents and explains the project. fosscord.js A powerful JavaScript library for interacting with the Fosscord API fosscord.js-builders A collection of builders that you can use when creating your bot. fosscord.py An API wrapper for Fosscord written in Python. docker \ud83d\udc33 Fosscord's Docker images and composing","title":"Resources"},{"location":"resources/#links","text":"Documentation Roadmap (Notion to-do board synced with GitHub issues) Status (Status page of the official fosscord instance) GitHub (GitHub organization) OpenCollective (Financially support the project to cover server costs and other expenses) Discord server (for support & organization (If we are finished we'll host our own support server)) Tor Hidden Service (Official Fosscord instance on TOR)","title":"Links"},{"location":"resources/#project-structure","text":"Fosscord consists of many repositories, which together make up the client and server:","title":"Project structure"},{"location":"resources/#server","text":"fosscord-server is the complete Fosscord Server and it Contains: api a HTTP REST server gateway a WebSocket Gateway server rtc a C++ webRTC server for voice and video sharing. webRTC-server a javascript webRTC server for voice and video communication dashboard An admin dashboard for the server (analytics, settings, administration, trust & safety) util contains all shared logic like Database Models, Utility functions... cdn is the content-delivery-content (CDN) that stores user uploaded images.","title":"Server"},{"location":"resources/#client","text":"fosscord-ui is a user interface framework in the style of discord. fosscord-themes contains all the official themes for the client. fosscord-plugins contains all the official plugins for the client. fosscord-client is the official (react)-native Fosscord client. ~~ fosscord-web-client was an effort to develop a fosscord web client.~~ (Discontinued) ~~ react-native-withcss CSS support for react native~~ (Discontinued) ~~ css-mediaquery CSS media query support for react native~~ (Discontinued)","title":"Client"},{"location":"resources/#others","text":"fosscord-docs Documentation of Fosscord fosscord-landingpage represents and explains the project. fosscord.js A powerful JavaScript library for interacting with the Fosscord API fosscord.js-builders A collection of builders that you can use when creating your bot. fosscord.py An API wrapper for Fosscord written in Python. docker \ud83d\udc33 Fosscord's Docker images and composing","title":"Others"},{"location":"api/","text":"API Encryption Routes","title":"Api"},{"location":"api/#api","text":"","title":"API"},{"location":"api/#encryption","text":"","title":"Encryption"},{"location":"api/#routes","text":"","title":"Routes"},{"location":"api/encryption/","text":"Encryption Philosophy Everything should be end-to-end encrypted by default. Everything should be configurable by the user/admin to their security needs. Once encryption is enabled you can't disable it anymore. (Plain text channels need be created as such) End to end encryption should also be possible on unsupported servers e.g. discord.com. (through special formatted messages) Based on the concept that the server cannot be trusted and could be compromised. more coming soon","title":"Encryption"},{"location":"api/encryption/#encryption","text":"","title":"Encryption"},{"location":"api/encryption/#philosophy","text":"Everything should be end-to-end encrypted by default. Everything should be configurable by the user/admin to their security needs. Once encryption is enabled you can't disable it anymore. (Plain text channels need be created as such) End to end encryption should also be possible on unsupported servers e.g. discord.com. (through special formatted messages) Based on the concept that the server cannot be trusted and could be compromised. more coming soon","title":"Philosophy"},{"location":"api/rights/","text":"User rights Introduction User rights are instance-wide per-user permission toggle that affects instance-wide permissions of users, such as the ability to edit one's own messages. Right Value Grants when it's 1 OPERATOR 1 << 0 All rights MANAGE_APPLICATIONS 1 << 1 Ability to alter or remove others' applications MANAGE_GUILDS 1 << 2 Same as the per-guild MANAGE_GUILD permission, but applies to all guilds and DM channels, can join any guild without invite MANAGE_MESSAGES 1 << 3 Can delete or edit any message they can read MANAGE_RATE_LIMITS 1 << 4 Add, change, define rate limits of other users, can also grant others BYPASS_RATE_LIMITS when combined with BYPASS_RATE_LIMITS and MANAGE_USERS MANAGE_ROUTING 1 << 5 Create, alter, enable, disable custom message routing rules in any channel/guild MANAGE_TICKETS 1 << 6 Respond to or resolve other users' support tickets MANAGE_USERS 1 << 7 Create, alter, remove, ban users; create, modify, remove user groups ADD_MEMBERS 1 << 8 Can manually add members into their guilds and group DMs BYPASS_RATE_LIMITS 1 << 9 Makes the user exempt from all rate limits CREATE_APPLICATIONS 1 << 10 Can create, edit, remove own applications CREATE_CHANNELS 1 << 11 Can create guild channels and custom channels CREATE_DMS 1 << 12 Can create 1:1 DMs (a user without SEND_MESSAGES cannot be added however) CREATE_DM_GROUPS 1 << 13 Can create group DMs (a user without SEND_MESSAGES cannot be added however) CREATE_GUILDS 1 << 14 Can create mass invites in the guilds that they have CREATE_INSTANT_INVITE CREATE_GUILDS 1 << 15 Can create guilds CREATE_ROLES 1 << 16 Can create roles and per-guild or per-channel permission overrides in the guilds that they have permissions CREATE_TEMPLATES 1 << 17 Can create templates for guilds, custom channels and channels with custom routing CREATE_WEBHOOKS 1 << 18 Can create webhooks in the guilds that they have permissions JOIN_GUILDS 1 << 19 Can join guilds by using invites or vanity names PIN_MESSAGES 1 << 20 Can modify the pinned messages in the guilds that they have permission SELF_ADD_REACTIONS 1 << 21 Can react to messages, subject to permissions SELF_DELETE_MESSAGES 1 << 22 Can delete own messages SELF_EDIT_MESSAGES 1 << 23 Can edit own messages SELF_EDIT_NAME 1 << 24 Can edit own username, nickname and avatar SEND_MESSAGES 1 << 25 Can send messages in the channels that they have permissions USE_ACTIVITIES 1 << 26 Can use voice activities, such as watch together or whiteboard USE_VIDEO 1 << 27 Can use video and screenshare in guilds/channels that they have permissions USE_VOICE 1 << 28 Can use voice in guilds/channels that they have permissions INVITE_USERS 1 << 29 Can create user-specific invites in the guilds that they have INVITE_USERS SELF_DELETE_DISABLE 1 << 30 Can delete/disable own account DEBTABLE 1 << 31 Can use pay-to-use features once paid CREDITABLE 1 << 32 Can earn money using monetization features in the guilds that have MONETIZATION_ENABLED Those individual right bits are combined to create the overall rights. Those rights may be granted to individual users as well as to user groups.","title":"User rights"},{"location":"api/rights/#user-rights","text":"","title":"User rights"},{"location":"api/rights/#introduction","text":"User rights are instance-wide per-user permission toggle that affects instance-wide permissions of users, such as the ability to edit one's own messages. Right Value Grants when it's 1 OPERATOR 1 << 0 All rights MANAGE_APPLICATIONS 1 << 1 Ability to alter or remove others' applications MANAGE_GUILDS 1 << 2 Same as the per-guild MANAGE_GUILD permission, but applies to all guilds and DM channels, can join any guild without invite MANAGE_MESSAGES 1 << 3 Can delete or edit any message they can read MANAGE_RATE_LIMITS 1 << 4 Add, change, define rate limits of other users, can also grant others BYPASS_RATE_LIMITS when combined with BYPASS_RATE_LIMITS and MANAGE_USERS MANAGE_ROUTING 1 << 5 Create, alter, enable, disable custom message routing rules in any channel/guild MANAGE_TICKETS 1 << 6 Respond to or resolve other users' support tickets MANAGE_USERS 1 << 7 Create, alter, remove, ban users; create, modify, remove user groups ADD_MEMBERS 1 << 8 Can manually add members into their guilds and group DMs BYPASS_RATE_LIMITS 1 << 9 Makes the user exempt from all rate limits CREATE_APPLICATIONS 1 << 10 Can create, edit, remove own applications CREATE_CHANNELS 1 << 11 Can create guild channels and custom channels CREATE_DMS 1 << 12 Can create 1:1 DMs (a user without SEND_MESSAGES cannot be added however) CREATE_DM_GROUPS 1 << 13 Can create group DMs (a user without SEND_MESSAGES cannot be added however) CREATE_GUILDS 1 << 14 Can create mass invites in the guilds that they have CREATE_INSTANT_INVITE CREATE_GUILDS 1 << 15 Can create guilds CREATE_ROLES 1 << 16 Can create roles and per-guild or per-channel permission overrides in the guilds that they have permissions CREATE_TEMPLATES 1 << 17 Can create templates for guilds, custom channels and channels with custom routing CREATE_WEBHOOKS 1 << 18 Can create webhooks in the guilds that they have permissions JOIN_GUILDS 1 << 19 Can join guilds by using invites or vanity names PIN_MESSAGES 1 << 20 Can modify the pinned messages in the guilds that they have permission SELF_ADD_REACTIONS 1 << 21 Can react to messages, subject to permissions SELF_DELETE_MESSAGES 1 << 22 Can delete own messages SELF_EDIT_MESSAGES 1 << 23 Can edit own messages SELF_EDIT_NAME 1 << 24 Can edit own username, nickname and avatar SEND_MESSAGES 1 << 25 Can send messages in the channels that they have permissions USE_ACTIVITIES 1 << 26 Can use voice activities, such as watch together or whiteboard USE_VIDEO 1 << 27 Can use video and screenshare in guilds/channels that they have permissions USE_VOICE 1 << 28 Can use voice in guilds/channels that they have permissions INVITE_USERS 1 << 29 Can create user-specific invites in the guilds that they have INVITE_USERS SELF_DELETE_DISABLE 1 << 30 Can delete/disable own account DEBTABLE 1 << 31 Can use pay-to-use features once paid CREDITABLE 1 << 32 Can earn money using monetization features in the guilds that have MONETIZATION_ENABLED Those individual right bits are combined to create the overall rights. Those rights may be granted to individual users as well as to user groups.","title":"Introduction"},{"location":"api/routes/","text":"Routes const ui = SwaggerUIBundle({ url: 'https://raw.githubusercontent.com/fosscord/fosscord-server/master/api/assets/openapi.json', dom_id: '#swagger-ui', })","title":"Routes"},{"location":"api/routes/#routes","text":"const ui = SwaggerUIBundle({ url: 'https://raw.githubusercontent.com/fosscord/fosscord-server/master/api/assets/openapi.json', dom_id: '#swagger-ui', })","title":"Routes"},{"location":"client/","text":"Client Plugins Themes","title":"Client"},{"location":"client/#client","text":"","title":"Client"},{"location":"client/#plugins","text":"","title":"Plugins"},{"location":"client/#themes","text":"","title":"Themes"},{"location":"client/plugins/","text":"Plugins Philosophy Plugins are executed in their environment to prevent security issues. Plugins can create their own UI and loaded in a separate view (similar to vscode extensions) . Plugins can access the component Api and therefore extend the client UI. Plugins can access the WebSocket Connection/Rest API and intercept/transform events. Plugins are restricted and can only do actions with the corresponding permission. Plugins should be accessible through a store that needs to verify the plugins (with dev options to load plugins/add other stores). Permissions Can't access the user's token (token plugins should rather be directly integrated into the client (e.g. account switcher)). All permissions must meet the purpose of the plugin and must justify why they need the certain permission to be approved. Shouldn't be able to make any request, except if it: Requests permission to access the api of the network. Requests permission to access a specific domain (e.g. plugins backend). Requests permission to access all domains. Shouldn't be able to intercept events, except if it: Requests permission to a specific event(s). Requests permission to all events. Needs to request permission to be able to extend the client's UI. more coming soon","title":"Plugins"},{"location":"client/plugins/#plugins","text":"","title":"Plugins"},{"location":"client/plugins/#philosophy","text":"Plugins are executed in their environment to prevent security issues. Plugins can create their own UI and loaded in a separate view (similar to vscode extensions) . Plugins can access the component Api and therefore extend the client UI. Plugins can access the WebSocket Connection/Rest API and intercept/transform events. Plugins are restricted and can only do actions with the corresponding permission. Plugins should be accessible through a store that needs to verify the plugins (with dev options to load plugins/add other stores).","title":"Philosophy"},{"location":"client/plugins/#permissions","text":"Can't access the user's token (token plugins should rather be directly integrated into the client (e.g. account switcher)). All permissions must meet the purpose of the plugin and must justify why they need the certain permission to be approved. Shouldn't be able to make any request, except if it: Requests permission to access the api of the network. Requests permission to access a specific domain (e.g. plugins backend). Requests permission to access all domains. Shouldn't be able to intercept events, except if it: Requests permission to a specific event(s). Requests permission to all events. Needs to request permission to be able to extend the client's UI. more coming soon","title":"Permissions"},{"location":"client/themes/","text":"Themes Philosophy Themes should look the same on all platforms. Themes should be made with an visual theme editor to easily create and edit your own themes. Themes should be combinable to use multiple themes at once. Themes should be installed and submitted through a theme store with voting options. Guilds should be able to specify their own themes for compatible clients. more coming soon","title":"Themes"},{"location":"client/themes/#themes","text":"","title":"Themes"},{"location":"client/themes/#philosophy","text":"Themes should look the same on all platforms. Themes should be made with an visual theme editor to easily create and edit your own themes. Themes should be combinable to use multiple themes at once. Themes should be installed and submitted through a theme store with voting options. Guilds should be able to specify their own themes for compatible clients. more coming soon","title":"Philosophy"},{"location":"contributing/","text":"Contributing By contributing you accept the code of conduct. Code of conduct This is the code of conduct for the Fosscord developer community. It is based on Artemis Lena Code of Conduct by FantasyCookie17. As it is licensed CC0, it may also be used in modified or non-modified form by other communities without permission by the author. Its purpose is to ensure a civilized, tolerant, compassionate, helpful, pluralistic and peaceful style of communication. Fosscord developer community includes Fosscord Github repositories and Fosscord development guild. Fosscord developers community is administered by the Fosscord maintainers group. If you contribute to the project in any form (for example through code by a pull request) you guarantee that you have the rights to resign all rights to Fosscord under the AGPLV3 license. Desirable behavior If possible, providing help with issues other users may have. If it suits the topic of the community, answer it in there, if it does not, try to link to a community where it is more on topic. Accepting other opinions, even if you disagree. This does not exclude the possibility to provide arguments for your own opinion. Pinging moderators by mentioning their names in chat in the case of rule violations, especially trolling or spamming. While doing so, do not quote or reply to the violator to prevent extra attention by non-moderators. In order to have your questions resolved more quickly and efficiently, see also: The XY problem, Don't ask to ask, No Hello and How to Ask Smart Questions Undesirable behavior Talking about things that do not suit the topic of the community. Communities exempt from this rule will mention that in their descriptions. Attacking people rather than attacking their arguments (a.k.a. ad hominem). Bringing extra attention by people who are not moderators to trolls and spammers. Self-censorship for reasons of politeness or similar. As long as you keep it civil and free of insults, it is desirable to discuss issues you have with people directly, rather than letting it build up and later creating drama. It is in the interest of the moderators to make the rooms feel comfortable for a large amount of people, this includes changing their own behavior where necessary and reasonable. If you feel it is better to discuss in a smaller group, ask the person you have an issue with and/or a moderator whether it is fine to invite them to a private chat. Making other users feel uncomfortable, for example by nagging them with questions they have stated they do not want to answer. Misgendering, deadnaming and assuming gender. Use the singular they/them and inclusive language where possible. Not liking the community. If you do, why don't you just leave? You would be causing discomfort to everyone else as well if you did not. Prohibited behavior Spreading hateful, violent or discriminatory ideologies or conspiracy theories, via images and other media (including avatars) or text (including nicknames), as well as discriminating against any group or person. This includes the use of slurs. Spamming. This includes adverts, large amounts of repetitive messages, sending invites to users without asking (invite spam), etc. Trolling; intentionally derailing conversations or producing discussions on non-issues. Doxing: The disclosure of others' private information without their consent. Sharing leaked proprietary source code from Discord Inc.: It is forbidden to share leaked proprietary source code from Discord Inc. Violation may lead to ban and legal consequences. Posting media that may cause harm or be triggering to other people. For example, people with photosensitive epilepsy may experience seizures from animations with rapidly changing or flashing colours. Actively suppressing opinions of other users. Being an undesired bot (bots are undesired if not approved by moderation), or adding an undesired bot to a community. Ban evasion (creation of additional accounts to join a community after having been banned from that room). If you are a moderator or otherwise have permissions above those of normal users: abusing your permissions for personal motives not compatible with this code of conduct. Continued harassment of other users. Posting explicit imagery (sexual content, displays of violence, etc.) or unwanted sexual or romantic advances towards other users. Posting content that is illegal to publish or illegal to distribute without permission in Germany. The reason is that in certain cases, especially when it comes to copyright, the service provider (who might be me), may be held liable, and I do not wish to get into legal trouble. Abusing loopholes in this code of conduct, for example doing something that is not explicitly covered by the prohibited behavior, yet is in conflict with the general idea of desirable behavior. Consequences of violation Undesirable behavior will lead to warnings, and later on, if repeated too often, kicks or bans. Prohibited behavior will, in most cases, directly lead to a kick or ban. Any kind of violation can lead to removal of the offending content. Kicks and bans apply to all communities administrated by Fosscord maintainers group. If a moderator violates the code of conduct, make sure to point it out to me. This can lead to warnings and demotion of the moderator. If I myself violate the code of conduct, no such possibility exists. Thus, it is important to call me out, or make one of my friends or moderators call me out. Further steps will then be discussed ad hoc. Changes to this code of conduct This code of conduct may be changed in order to enhance clarity and precision at any time, typically without notification.","title":"Contributing"},{"location":"contributing/#contributing","text":"By contributing you accept the code of conduct.","title":"Contributing"},{"location":"contributing/#code-of-conduct","text":"This is the code of conduct for the Fosscord developer community. It is based on Artemis Lena Code of Conduct by FantasyCookie17. As it is licensed CC0, it may also be used in modified or non-modified form by other communities without permission by the author. Its purpose is to ensure a civilized, tolerant, compassionate, helpful, pluralistic and peaceful style of communication. Fosscord developer community includes Fosscord Github repositories and Fosscord development guild. Fosscord developers community is administered by the Fosscord maintainers group. If you contribute to the project in any form (for example through code by a pull request) you guarantee that you have the rights to resign all rights to Fosscord under the AGPLV3 license.","title":"Code of conduct"},{"location":"contributing/#desirable-behavior","text":"If possible, providing help with issues other users may have. If it suits the topic of the community, answer it in there, if it does not, try to link to a community where it is more on topic. Accepting other opinions, even if you disagree. This does not exclude the possibility to provide arguments for your own opinion. Pinging moderators by mentioning their names in chat in the case of rule violations, especially trolling or spamming. While doing so, do not quote or reply to the violator to prevent extra attention by non-moderators. In order to have your questions resolved more quickly and efficiently, see also: The XY problem, Don't ask to ask, No Hello and How to Ask Smart Questions","title":"Desirable behavior"},{"location":"contributing/#undesirable-behavior","text":"Talking about things that do not suit the topic of the community. Communities exempt from this rule will mention that in their descriptions. Attacking people rather than attacking their arguments (a.k.a. ad hominem). Bringing extra attention by people who are not moderators to trolls and spammers. Self-censorship for reasons of politeness or similar. As long as you keep it civil and free of insults, it is desirable to discuss issues you have with people directly, rather than letting it build up and later creating drama. It is in the interest of the moderators to make the rooms feel comfortable for a large amount of people, this includes changing their own behavior where necessary and reasonable. If you feel it is better to discuss in a smaller group, ask the person you have an issue with and/or a moderator whether it is fine to invite them to a private chat. Making other users feel uncomfortable, for example by nagging them with questions they have stated they do not want to answer. Misgendering, deadnaming and assuming gender. Use the singular they/them and inclusive language where possible. Not liking the community. If you do, why don't you just leave? You would be causing discomfort to everyone else as well if you did not.","title":"Undesirable behavior"},{"location":"contributing/#prohibited-behavior","text":"Spreading hateful, violent or discriminatory ideologies or conspiracy theories, via images and other media (including avatars) or text (including nicknames), as well as discriminating against any group or person. This includes the use of slurs. Spamming. This includes adverts, large amounts of repetitive messages, sending invites to users without asking (invite spam), etc. Trolling; intentionally derailing conversations or producing discussions on non-issues. Doxing: The disclosure of others' private information without their consent. Sharing leaked proprietary source code from Discord Inc.: It is forbidden to share leaked proprietary source code from Discord Inc. Violation may lead to ban and legal consequences. Posting media that may cause harm or be triggering to other people. For example, people with photosensitive epilepsy may experience seizures from animations with rapidly changing or flashing colours. Actively suppressing opinions of other users. Being an undesired bot (bots are undesired if not approved by moderation), or adding an undesired bot to a community. Ban evasion (creation of additional accounts to join a community after having been banned from that room). If you are a moderator or otherwise have permissions above those of normal users: abusing your permissions for personal motives not compatible with this code of conduct. Continued harassment of other users. Posting explicit imagery (sexual content, displays of violence, etc.) or unwanted sexual or romantic advances towards other users. Posting content that is illegal to publish or illegal to distribute without permission in Germany. The reason is that in certain cases, especially when it comes to copyright, the service provider (who might be me), may be held liable, and I do not wish to get into legal trouble. Abusing loopholes in this code of conduct, for example doing something that is not explicitly covered by the prohibited behavior, yet is in conflict with the general idea of desirable behavior.","title":"Prohibited behavior"},{"location":"contributing/#consequences-of-violation","text":"Undesirable behavior will lead to warnings, and later on, if repeated too often, kicks or bans. Prohibited behavior will, in most cases, directly lead to a kick or ban. Any kind of violation can lead to removal of the offending content. Kicks and bans apply to all communities administrated by Fosscord maintainers group. If a moderator violates the code of conduct, make sure to point it out to me. This can lead to warnings and demotion of the moderator. If I myself violate the code of conduct, no such possibility exists. Thus, it is important to call me out, or make one of my friends or moderators call me out. Further steps will then be discussed ad hoc.","title":"Consequences of violation"},{"location":"contributing/#changes-to-this-code-of-conduct","text":"This code of conduct may be changed in order to enhance clarity and precision at any time, typically without notification.","title":"Changes to this code of conduct"},{"location":"contributing/server/","text":"Server Requirements Accept the code of conduct and follow the server setup guide to setup the development environment. Gateway The Gateway is a WebSocket server that is responsible for listening and emitting events. For documentation, head over to the Discord docs as our own documentation is not written yet. If you want to work on a feature, please comment on the corresponding issue or open a issue so so nobody implements something twice. For the WebSocket, we use the ws package and we'll write our own packet handler for the individual opcodes and events. API The API is a HTTP REST server that process requests and manipulates the database. You can find the api documentation here . You can find the Roadmap overview here . Every route has its own issue . If you want to work on a feature please comment on the corresponding issue or write us on our development server so we can assign and discuss it and nobody implements something twice. Structure You can find the API directory in the fosscord-server Github repository. Inside it you can find: Translation We use i18next to manage translation/localization in some API Responses. The .json language files are located in /api/locales/ and are separated by namespaces. Source code We use TypeScript (JavaScript with types). The .ts source files are located in /api/src/ and will be compiled to .js in the /api/dist/ directory. Middlewares All Express Middlewares are in /api/src/middlewares/ and need to be manually loaded by /api/src/Server.ts . Routes All Express Router routes are in /api/src/routes/ and are automatically registered based on the file structure. Models All database TypeORM entities are located in /util/src/entities Util All Utility functions are in the directory /src/util/ and in @fosscord/util Configuration Philosophy Every fosscord server instance should be completely configurable in every way, without the need to change the source code. The config should have reasonable defaults similar to discord. Only in special cases it should require a third party config value. The config should be changeable over the admin dashboard and update in realtime without the need to restart the servers. The very first time the server starts, it saves to default config in the database. The next start it will load the config from the database. Example You should not get() the Config in the root of your file and it instead load the config every time you access a value. Import Config from fosscord-server-util: // at the top of the file import the Config file from /src/util/Config.ts import { Config } from \"@fosscord-server-util\" ; Access the Config in your route: router . get ( \"/\" , ( req : Request , res : Response ) => { // call Config.get() to get the whole config object and then just access the property you want const { allowNewRegistration } = Config . get (). register ; }); Config.get() returns the current config object and is not expensive at all Extending The default Config is located in server-util /src/util/Config.ts and exports a interface DefaultOptions and a const DefaultOptions object with reasonable default values. To add your own values to the config, add the properties to the interface with corresponding types and add default values to const DefaultOptions . Also you don't need to worry about updating \"old config versions\", because new values will automatically be synced with the database. Note, however, that if the database already has a default value it won't update it. Routes All routes are located in the directory /src/routes/ and are loaded on start by a the lambert-server package. The HTTP API path is generated automatically based on the folder structure, so it is important that you name your files accordingly. If you want to use URL Params like :id in e.g. /users/:id you need to use # instead of : for the folder/filename, because of file naming issues on windows. index.ts files won't serve /api/index and instead alias the parent folder e.g. /api/ Your file needs to default export a express.Router() : import { Router } from express ; const router = Router (); export default router ; Now you can just use any regular express function on the router variable e.g: router . get ( \"/\" , ( req , res ) => {}); router . post ( \"/\" , ( req , res ) => {}); router . get ( \"/members\" , ( req , res ) => {}); Authentication Every request must contain the authorization header except the /login and /register route. You can add additional non-auth routes in /src/middlewares/Authentication.ts To access the user id for the current request use req.user_id Body Validation We use a custom body validation logic from lambert-server to check if the JSON body is valid. To import the function from /src/util/instanceOf.ts use: import { check } from \"/src/util/instanceOf\" ; Now you can use the middleware check for your routes by calling check with your Body Schema. router . post ( \"/\" , check (...), ( req , res ) => {}); Schema A Schema is a Object Structure with key-value objects that checks if the supplied body is an instance of the specified class. { id : String , roles : [ String ] } Notice if you use e.g. BigInt even if you can't supply it with JSON, it will automatically convert the supplied JSON number/string to a BigInt. Also if you want to check for an array of, just put the type inside [] . Optional Parameter You can specify optional parameters if you prefix the key with a $ (dollar sign) e.g.: { $captcha: String } , this will make the captcha property in the body optional. Limit String length Additionally import the class Length from instanceOf and specify the type by making a new Length Object taking following parameters: import { Length } from \"/src/util/instanceOf\" ; const min = 2 ; const max = 32 ; const type = String ; { username : new Length ( min , max , type ); } this will limit the maximum string/number/array length to the min and max value. Example import { check , Length } from \"/src/util/instanceOf\" ; const SCHEMA = { username : new Length ( 2 , 32 , String ), age : Number , $posts : [{ title : String }], }; app . post ( \"/\" , check ( SCHEMA ), ( req , res ) => {}); Throw Errors If the body validation fails it will automatically throw an error. The errors structure is a key-value Object describing what field contained the error: { \"code\" : 50035 , \"message\" : \"Invalid Form Body\" , \"errors\" : { \"email\" : { \"_errors\" : [ { \"message\" : \"Email is already registered\" , \"code\" : \"EMAIL_ALREADY_REGISTERED\" } ] }, \"username\" : { \"_errors\" : [ { \"message\" : \"Must be between 2 - 32 in length\" , \"code\" : \"BASE_TYPE_BAD_LENGTH\" } ] } } } To manually throw a FieldError import FieldErrors import { FieldErrors } from / src / iltu / instanceOf ; To make sure your errors are understood in all languages translate it with i18next and req.t . So after you have checked the field is invalid throw the FieldErrors . throw FieldErrors (( login : { message : req.t ( \"auth:login.INVALID_LOGIN\" ), code : \"INVALID_LOGIN\" }}); Database Philosophy The instance hoster should be able to use any database they want for their specific size and purpose. That is why we use typeorm for database entities (models) for every data structure we use, because typeorm supports many different database engines. We use strings for all ids and bitfields (Tho when working with bitfields we convert it to BigInts and pass it to the utility BitField class). General Have a look at the typeorm documentation to get familiar with it or watch this tutorial . TypeORM supports MySQL, MariaDB, Postgres, CockroachDB, SQLite, Microsoft SQL Server, Oracle, SAP Hana, sql.js. Getting Started Import the entity you want to select, manipulate, delete or insert from @fosscord/util List of all entities : Application, Attachment, AuditLog, Ban, BaseClass, Channel, Config, ConnectedAccount, Emoji, Guild, Invite, Member, Message, RateLimit, ReadState, Recipient, Relationship, Role, Sticker, Team, TeamMember, Template, User, VoiceState, Webhook Example database query import { Guild } from \"fosscord-server-util\" ; await new Guild ({ ... }). save (); // inserts a new guild or updates it if it already exists const guild = await Guild . findOne ({ id : \"23948723947932\" }). exec (); // searches for a guild await Guild . delete ({ owner_id : \"34975309473\" }) // deletes all guilds of the specific owner Entities The typeorm database entities are located in util/src/entities/ . To add your own database entity, create a new file, export the model and import/export it in util/src/entities/index.ts . Example entity @Entity ( \"users\" ) export class User extends BaseClass { // id column is automatically added by BaseClass @Column () username : string ; @JoinColumn ({ name : \"connected_account_ids\" }) @OneToMany ( () => ConnectedAccount , ( account : ConnectedAccount ) => account . user ) connected_accounts : ConnectedAccount []; static async getPublicUser ( user_id : string , opts? : FindOneOptions < User > ) { return await User . findOneOrFail ( { id : user_id }, { ... opts , select : [... PublicUserProjection , ...( opts ? . select || [])], } ); } } Emit Events Most Routes modify the database and therefore need to inform the clients with events for data changes. Events are either stored locally if the server was started through the bundle or in RabbitMQ and are distributed to the gateway servers. You can find all events on the discord docs page and in util/src/interfaces/Event.ts . To emit an event import the emitEvent function from @fosscord/util import { emitEvent } from \"../../../util/Event\" ; You need to specify whom you want to send the event to, to do that either pass guild_id , user_id or channel_id . Additionally you need to set the eventname e.g. GUILD_DELETE . { guild_id? : bigint ; // specify this if this event should be sent to all guild members channel_id? : bigint ; // specify this if this event should be sent to all channel members user_id? : bigint ; // specify this if this event should be sent to the specific user event : string ; // the EVENTNAME, you can find all gateway event names in the @fosscord/util Events file data? : any ; // event payload data } For easy intellisense, annotate the parameter with the corresponding Event interface from @fosscord/util : import { GuildDeleteEvent } from \"@fosscord/util\" ; emitEvent ({...} as GuildDeleteEvent ); Example Putting it all together: await emitEvent ({ user_id : \"3297349345345874\" , event : \"GUILD_DELETE\" , data : { id : \"96784598743975349\" , }, } as GuildDeleteEvent ); Permissions To get the permission for a guild member import the getPermission from fosscord-server-util . import { getPermission } from \"fosscord-server-util\" ; The first argument is the user_id the second the guild_id and the third an optional channel_id. const permissions = await getPermission ( user_id : string , guild_id : string , channel_id? : string ) const permissions = await getPermission ( \"106142653265366125\" , \"4061326832657368175\" ) Example const perms = await getPermission ( req . userid , guild_id ); // preferred method: Use this if you want to check if a user lacks a certain permission and abort the operation perms . hasThrow ( \"MANAGE_GUILD\" ) // will throw an error if the users lacks the permission if ( perms . has ( \"MANAGE_GUILD\" )) { ... }","title":"Server"},{"location":"contributing/server/#server","text":"","title":"Server"},{"location":"contributing/server/#requirements","text":"Accept the code of conduct and follow the server setup guide to setup the development environment.","title":"Requirements"},{"location":"contributing/server/#gateway","text":"The Gateway is a WebSocket server that is responsible for listening and emitting events. For documentation, head over to the Discord docs as our own documentation is not written yet. If you want to work on a feature, please comment on the corresponding issue or open a issue so so nobody implements something twice. For the WebSocket, we use the ws package and we'll write our own packet handler for the individual opcodes and events.","title":"Gateway"},{"location":"contributing/server/#api","text":"The API is a HTTP REST server that process requests and manipulates the database. You can find the api documentation here . You can find the Roadmap overview here . Every route has its own issue . If you want to work on a feature please comment on the corresponding issue or write us on our development server so we can assign and discuss it and nobody implements something twice.","title":"API"},{"location":"contributing/server/#structure","text":"You can find the API directory in the fosscord-server Github repository. Inside it you can find:","title":"Structure"},{"location":"contributing/server/#translation","text":"We use i18next to manage translation/localization in some API Responses. The .json language files are located in /api/locales/ and are separated by namespaces.","title":"Translation"},{"location":"contributing/server/#source-code","text":"We use TypeScript (JavaScript with types). The .ts source files are located in /api/src/ and will be compiled to .js in the /api/dist/ directory.","title":"Source code"},{"location":"contributing/server/#middlewares","text":"All Express Middlewares are in /api/src/middlewares/ and need to be manually loaded by /api/src/Server.ts .","title":"Middlewares"},{"location":"contributing/server/#routes","text":"All Express Router routes are in /api/src/routes/ and are automatically registered based on the file structure.","title":"Routes"},{"location":"contributing/server/#models","text":"All database TypeORM entities are located in /util/src/entities","title":"Models"},{"location":"contributing/server/#util","text":"All Utility functions are in the directory /src/util/ and in @fosscord/util","title":"Util"},{"location":"contributing/server/#configuration","text":"","title":"Configuration"},{"location":"contributing/server/#philosophy","text":"Every fosscord server instance should be completely configurable in every way, without the need to change the source code. The config should have reasonable defaults similar to discord. Only in special cases it should require a third party config value. The config should be changeable over the admin dashboard and update in realtime without the need to restart the servers. The very first time the server starts, it saves to default config in the database. The next start it will load the config from the database.","title":"Philosophy"},{"location":"contributing/server/#example","text":"You should not get() the Config in the root of your file and it instead load the config every time you access a value. Import Config from fosscord-server-util: // at the top of the file import the Config file from /src/util/Config.ts import { Config } from \"@fosscord-server-util\" ; Access the Config in your route: router . get ( \"/\" , ( req : Request , res : Response ) => { // call Config.get() to get the whole config object and then just access the property you want const { allowNewRegistration } = Config . get (). register ; }); Config.get() returns the current config object and is not expensive at all","title":"Example"},{"location":"contributing/server/#extending","text":"The default Config is located in server-util /src/util/Config.ts and exports a interface DefaultOptions and a const DefaultOptions object with reasonable default values. To add your own values to the config, add the properties to the interface with corresponding types and add default values to const DefaultOptions . Also you don't need to worry about updating \"old config versions\", because new values will automatically be synced with the database. Note, however, that if the database already has a default value it won't update it.","title":"Extending"},{"location":"contributing/server/#routes_1","text":"All routes are located in the directory /src/routes/ and are loaded on start by a the lambert-server package. The HTTP API path is generated automatically based on the folder structure, so it is important that you name your files accordingly. If you want to use URL Params like :id in e.g. /users/:id you need to use # instead of : for the folder/filename, because of file naming issues on windows. index.ts files won't serve /api/index and instead alias the parent folder e.g. /api/ Your file needs to default export a express.Router() : import { Router } from express ; const router = Router (); export default router ; Now you can just use any regular express function on the router variable e.g: router . get ( \"/\" , ( req , res ) => {}); router . post ( \"/\" , ( req , res ) => {}); router . get ( \"/members\" , ( req , res ) => {});","title":"Routes"},{"location":"contributing/server/#authentication","text":"Every request must contain the authorization header except the /login and /register route. You can add additional non-auth routes in /src/middlewares/Authentication.ts To access the user id for the current request use req.user_id","title":"Authentication"},{"location":"contributing/server/#body-validation","text":"We use a custom body validation logic from lambert-server to check if the JSON body is valid. To import the function from /src/util/instanceOf.ts use: import { check } from \"/src/util/instanceOf\" ; Now you can use the middleware check for your routes by calling check with your Body Schema. router . post ( \"/\" , check (...), ( req , res ) => {});","title":"Body Validation"},{"location":"contributing/server/#schema","text":"A Schema is a Object Structure with key-value objects that checks if the supplied body is an instance of the specified class. { id : String , roles : [ String ] } Notice if you use e.g. BigInt even if you can't supply it with JSON, it will automatically convert the supplied JSON number/string to a BigInt. Also if you want to check for an array of, just put the type inside [] .","title":"Schema"},{"location":"contributing/server/#optional-parameter","text":"You can specify optional parameters if you prefix the key with a $ (dollar sign) e.g.: { $captcha: String } , this will make the captcha property in the body optional.","title":"Optional Parameter"},{"location":"contributing/server/#limit-string-length","text":"Additionally import the class Length from instanceOf and specify the type by making a new Length Object taking following parameters: import { Length } from \"/src/util/instanceOf\" ; const min = 2 ; const max = 32 ; const type = String ; { username : new Length ( min , max , type ); } this will limit the maximum string/number/array length to the min and max value.","title":"Limit String length"},{"location":"contributing/server/#example_1","text":"import { check , Length } from \"/src/util/instanceOf\" ; const SCHEMA = { username : new Length ( 2 , 32 , String ), age : Number , $posts : [{ title : String }], }; app . post ( \"/\" , check ( SCHEMA ), ( req , res ) => {});","title":"Example"},{"location":"contributing/server/#throw-errors","text":"If the body validation fails it will automatically throw an error. The errors structure is a key-value Object describing what field contained the error: { \"code\" : 50035 , \"message\" : \"Invalid Form Body\" , \"errors\" : { \"email\" : { \"_errors\" : [ { \"message\" : \"Email is already registered\" , \"code\" : \"EMAIL_ALREADY_REGISTERED\" } ] }, \"username\" : { \"_errors\" : [ { \"message\" : \"Must be between 2 - 32 in length\" , \"code\" : \"BASE_TYPE_BAD_LENGTH\" } ] } } } To manually throw a FieldError import FieldErrors import { FieldErrors } from / src / iltu / instanceOf ; To make sure your errors are understood in all languages translate it with i18next and req.t . So after you have checked the field is invalid throw the FieldErrors . throw FieldErrors (( login : { message : req.t ( \"auth:login.INVALID_LOGIN\" ), code : \"INVALID_LOGIN\" }});","title":"Throw Errors"},{"location":"contributing/server/#database","text":"","title":"Database"},{"location":"contributing/server/#philosophy_1","text":"The instance hoster should be able to use any database they want for their specific size and purpose. That is why we use typeorm for database entities (models) for every data structure we use, because typeorm supports many different database engines. We use strings for all ids and bitfields (Tho when working with bitfields we convert it to BigInts and pass it to the utility BitField class).","title":"Philosophy"},{"location":"contributing/server/#general","text":"Have a look at the typeorm documentation to get familiar with it or watch this tutorial . TypeORM supports MySQL, MariaDB, Postgres, CockroachDB, SQLite, Microsoft SQL Server, Oracle, SAP Hana, sql.js.","title":"General"},{"location":"contributing/server/#getting-started","text":"Import the entity you want to select, manipulate, delete or insert from @fosscord/util List of all entities : Application, Attachment, AuditLog, Ban, BaseClass, Channel, Config, ConnectedAccount, Emoji, Guild, Invite, Member, Message, RateLimit, ReadState, Recipient, Relationship, Role, Sticker, Team, TeamMember, Template, User, VoiceState, Webhook","title":"Getting Started"},{"location":"contributing/server/#example-database-query","text":"import { Guild } from \"fosscord-server-util\" ; await new Guild ({ ... }). save (); // inserts a new guild or updates it if it already exists const guild = await Guild . findOne ({ id : \"23948723947932\" }). exec (); // searches for a guild await Guild . delete ({ owner_id : \"34975309473\" }) // deletes all guilds of the specific owner","title":"Example database query"},{"location":"contributing/server/#entities","text":"The typeorm database entities are located in util/src/entities/ . To add your own database entity, create a new file, export the model and import/export it in util/src/entities/index.ts .","title":"Entities"},{"location":"contributing/server/#example-entity","text":"@Entity ( \"users\" ) export class User extends BaseClass { // id column is automatically added by BaseClass @Column () username : string ; @JoinColumn ({ name : \"connected_account_ids\" }) @OneToMany ( () => ConnectedAccount , ( account : ConnectedAccount ) => account . user ) connected_accounts : ConnectedAccount []; static async getPublicUser ( user_id : string , opts? : FindOneOptions < User > ) { return await User . findOneOrFail ( { id : user_id }, { ... opts , select : [... PublicUserProjection , ...( opts ? . select || [])], } ); } }","title":"Example entity"},{"location":"contributing/server/#emit-events","text":"Most Routes modify the database and therefore need to inform the clients with events for data changes. Events are either stored locally if the server was started through the bundle or in RabbitMQ and are distributed to the gateway servers. You can find all events on the discord docs page and in util/src/interfaces/Event.ts . To emit an event import the emitEvent function from @fosscord/util import { emitEvent } from \"../../../util/Event\" ; You need to specify whom you want to send the event to, to do that either pass guild_id , user_id or channel_id . Additionally you need to set the eventname e.g. GUILD_DELETE . { guild_id? : bigint ; // specify this if this event should be sent to all guild members channel_id? : bigint ; // specify this if this event should be sent to all channel members user_id? : bigint ; // specify this if this event should be sent to the specific user event : string ; // the EVENTNAME, you can find all gateway event names in the @fosscord/util Events file data? : any ; // event payload data } For easy intellisense, annotate the parameter with the corresponding Event interface from @fosscord/util : import { GuildDeleteEvent } from \"@fosscord/util\" ; emitEvent ({...} as GuildDeleteEvent );","title":"Emit Events"},{"location":"contributing/server/#example_2","text":"Putting it all together: await emitEvent ({ user_id : \"3297349345345874\" , event : \"GUILD_DELETE\" , data : { id : \"96784598743975349\" , }, } as GuildDeleteEvent );","title":"Example"},{"location":"contributing/server/#permissions","text":"To get the permission for a guild member import the getPermission from fosscord-server-util . import { getPermission } from \"fosscord-server-util\" ; The first argument is the user_id the second the guild_id and the third an optional channel_id. const permissions = await getPermission ( user_id : string , guild_id : string , channel_id? : string ) const permissions = await getPermission ( \"106142653265366125\" , \"4061326832657368175\" )","title":"Permissions"},{"location":"contributing/server/#example_3","text":"const perms = await getPermission ( req . userid , guild_id ); // preferred method: Use this if you want to check if a user lacks a certain permission and abort the operation perms . hasThrow ( \"MANAGE_GUILD\" ) // will throw an error if the users lacks the permission if ( perms . has ( \"MANAGE_GUILD\" )) { ... }","title":"Example"},{"location":"contributing/ui/","text":"UI Framework see: @fosscord/ui Requirements You should be familiar with: Git NodeJS SCSS Getting Started git clone https://github.com/fosscord/fosscord-ui cd fosscord-ui npm install npm run scss Open ./test/index.html to see the test page. Writing a component text inside of <> has to be replaced by the corresponding values create a file named like the component you're creating in test/<component>.html and scss/<component>.scss copy the content of test/template.html to test/<component>.html and replace the <h1> content with the components name source the created test/<component>.html> in test/index.html as follows: append the following to scss/index.scss to the div with the class \"grid\" < a class = \"Link\" href = \"<component>.html\" class = \"text link\" > < component > </ a > source the created scss/<component>.scss in scss/index.scss as follows: append the following to scss/index.scss ... @ import \"<component>.scss\" ;","title":"UI Framework"},{"location":"contributing/ui/#ui-framework","text":"see: @fosscord/ui","title":"UI Framework"},{"location":"contributing/ui/#requirements","text":"You should be familiar with: Git NodeJS SCSS","title":"Requirements"},{"location":"contributing/ui/#getting-started","text":"git clone https://github.com/fosscord/fosscord-ui cd fosscord-ui npm install npm run scss Open ./test/index.html to see the test page.","title":"Getting Started"},{"location":"contributing/ui/#writing-a-component","text":"text inside of <> has to be replaced by the corresponding values create a file named like the component you're creating in test/<component>.html and scss/<component>.scss copy the content of test/template.html to test/<component>.html and replace the <h1> content with the components name source the created test/<component>.html> in test/index.html as follows: append the following to scss/index.scss to the div with the class \"grid\" < a class = \"Link\" href = \"<component>.html\" class = \"text link\" > < component > </ a > source the created scss/<component>.scss in scss/index.scss as follows: append the following to scss/index.scss ... @ import \"<component>.scss\" ;","title":"Writing a component"},{"location":"setup/","text":"Setup Bots Server Hosting","title":"Setup"},{"location":"setup/#setup","text":"","title":"Setup"},{"location":"setup/#bots","text":"","title":"Bots"},{"location":"setup/#server","text":"","title":"Server"},{"location":"setup/#hosting","text":"","title":"Hosting"},{"location":"setup/bots/","text":"Bots Fosscord is backwards compatible to discord, which means you can reuse your existing discord bot library and only need to change the api endpoints. Currently the bot dashboard is still in development and not yet finished. Until then you can use regular user accounts. Similarly in the instances where the human/bot distinction is disabled, just a regular user would be used. Retrieve the user token: Open the instance in your browser Logout of your current account Register a new account Enable DevTools (hit F12 or Right click on the page -> Inspect ). Open the network tab inside of DevTools Enable the xhr/fetch request filter Execute any kind of action (navigate to a channel, send a message) Click on any (api) request Inside of \"Request Headers\" copy the value of the authorization header. Done : You now can use this copied token to login with your bot libary or authorize any api request by putting it inside the authorization header. Notice : Currently you can but don't need to prefix the token with \" Bot \". Libraries Change https://api.fosscord.com to your desired endpoint. Replace your token here with your copied token. Discord.js Inside the client option you can specify the api endpoint: const { Client } = require ( \"discord.js\" ); const client = new Client ({ http : { version : 9 , api : \"https://api.fosscord.com\" , cdn : \"https://cdn.fosscord.com\" , invite : \"https://fosscord.com/invite\" , }, }); client . login ( \"your token here\" ); Discord.py import discord discord . http . Route . BASE = \"https://api.fosscord.com\" client = discord . Client () client . run ( 'your token here' ) JDA import java.lang.reflect.* ; import net.dv8tion.jda.internal.requests.* ; public static void main ( String [] args ) { JDA jda = JDABuilder . createDefault ( \"your token here\" ). build (); Field field = Requester . class . getDeclaredField ( \"DISCORD_API_PREFIX\" ) field . setAccessible ( true ); Field modifiers = Field . class . getDeclaredField ( \"modifiers\" ); modifiers . setAccessible ( true ); modifiers . setString ( field , field . getModifiers () & ~ Modifier . FINAL ); field . set ( null , \"https://api.fosscord.com\" ); }","title":"Bots"},{"location":"setup/bots/#bots","text":"Fosscord is backwards compatible to discord, which means you can reuse your existing discord bot library and only need to change the api endpoints. Currently the bot dashboard is still in development and not yet finished. Until then you can use regular user accounts. Similarly in the instances where the human/bot distinction is disabled, just a regular user would be used.","title":"Bots"},{"location":"setup/bots/#retrieve-the-user-token","text":"Open the instance in your browser Logout of your current account Register a new account Enable DevTools (hit F12 or Right click on the page -> Inspect ). Open the network tab inside of DevTools Enable the xhr/fetch request filter Execute any kind of action (navigate to a channel, send a message) Click on any (api) request Inside of \"Request Headers\" copy the value of the authorization header. Done : You now can use this copied token to login with your bot libary or authorize any api request by putting it inside the authorization header. Notice : Currently you can but don't need to prefix the token with \" Bot \".","title":"Retrieve the user token:"},{"location":"setup/bots/#libraries","text":"Change https://api.fosscord.com to your desired endpoint. Replace your token here with your copied token.","title":"Libraries"},{"location":"setup/bots/#discordjs","text":"Inside the client option you can specify the api endpoint: const { Client } = require ( \"discord.js\" ); const client = new Client ({ http : { version : 9 , api : \"https://api.fosscord.com\" , cdn : \"https://cdn.fosscord.com\" , invite : \"https://fosscord.com/invite\" , }, }); client . login ( \"your token here\" );","title":"Discord.js"},{"location":"setup/bots/#discordpy","text":"import discord discord . http . Route . BASE = \"https://api.fosscord.com\" client = discord . Client () client . run ( 'your token here' )","title":"Discord.py"},{"location":"setup/bots/#jda","text":"import java.lang.reflect.* ; import net.dv8tion.jda.internal.requests.* ; public static void main ( String [] args ) { JDA jda = JDABuilder . createDefault ( \"your token here\" ). build (); Field field = Requester . class . getDeclaredField ( \"DISCORD_API_PREFIX\" ) field . setAccessible ( true ); Field modifiers = Field . class . getDeclaredField ( \"modifiers\" ); modifiers . setAccessible ( true ); modifiers . setString ( field , field . getModifiers () & ~ Modifier . FINAL ); field . set ( null , \"https://api.fosscord.com\" ); }","title":"JDA"},{"location":"setup/hosting/","text":"Hosting Many users are confused on where to host their Fosscord instances. This guide will show you multiple hosting methods, and tell you what works and what does not. As a rule of thumb: Free hosting methods generally do not work! Recommended Methods Dedicated Servers A dedicated server is the most classic hosting solution. It is an actual, physical machine that you get completely for yourself. They are more expensive than a typical VPS for example, but give you the most control, down to what exact hardware you want to use. Pro Contra Full Control More expensive You get the full potential of your server No dynamic resources Recommended providers: ServerBlaze (Sponsor), Hetzner Virtual Private Servers A Virtual Private Server, or VPS for short, is a virtual machine that runs on a larger dedicated server. This makes a VPS cheaper than a dedicated server, as providers can rent out multiple VPS's per server. It also allows you to dynamically change the resources your server is getting, if your provider supports that. Pro Contra Affordable Virtualized Dynamic Resources Hardware is shared with others Recommended providers: Google Cloud , AWS , Azure Selfhosting Depending on your electricity prices, this may be the cheapest option. Just use any machine that you don't actively need as a server, and run it at home! This could be an old PC, a Raspberry Pi , actual server hardware, or technically even a phone. This gives you the most control possible, and also allows you to breathe some life into old devices! Note: Publicly hosting a service from your internet connection reveals your IP address to the public. If you do not want that, you can look into services like Cloudflare . Pro Contra The most control A lot of work Repurpose old devices Risk of DDOS attacks etc Unsupported Methods Specialized website hosting services, that don't give you root access to a server Online code collaboration sites like replit or glitch","title":"Hosting"},{"location":"setup/hosting/#hosting","text":"Many users are confused on where to host their Fosscord instances. This guide will show you multiple hosting methods, and tell you what works and what does not. As a rule of thumb: Free hosting methods generally do not work!","title":"Hosting"},{"location":"setup/hosting/#recommended-methods","text":"","title":"Recommended Methods"},{"location":"setup/hosting/#dedicated-servers","text":"A dedicated server is the most classic hosting solution. It is an actual, physical machine that you get completely for yourself. They are more expensive than a typical VPS for example, but give you the most control, down to what exact hardware you want to use. Pro Contra Full Control More expensive You get the full potential of your server No dynamic resources Recommended providers: ServerBlaze (Sponsor), Hetzner","title":"Dedicated Servers"},{"location":"setup/hosting/#virtual-private-servers","text":"A Virtual Private Server, or VPS for short, is a virtual machine that runs on a larger dedicated server. This makes a VPS cheaper than a dedicated server, as providers can rent out multiple VPS's per server. It also allows you to dynamically change the resources your server is getting, if your provider supports that. Pro Contra Affordable Virtualized Dynamic Resources Hardware is shared with others Recommended providers: Google Cloud , AWS , Azure","title":"Virtual Private Servers"},{"location":"setup/hosting/#selfhosting","text":"Depending on your electricity prices, this may be the cheapest option. Just use any machine that you don't actively need as a server, and run it at home! This could be an old PC, a Raspberry Pi , actual server hardware, or technically even a phone. This gives you the most control possible, and also allows you to breathe some life into old devices! Note: Publicly hosting a service from your internet connection reveals your IP address to the public. If you do not want that, you can look into services like Cloudflare . Pro Contra The most control A lot of work Repurpose old devices Risk of DDOS attacks etc","title":"Selfhosting"},{"location":"setup/hosting/#unsupported-methods","text":"Specialized website hosting services, that don't give you root access to a server Online code collaboration sites like replit or glitch","title":"Unsupported Methods"},{"location":"setup/server/","text":"Server Setup Download This is the stable fosscord-server release. Download the server release from GitHub for your operating system. (Size ~80mb) Double click the file to start the server. (The first time it takes longer as it needs to setup the server) You can now access it on http://localhost:3001 . With terminal This is the latest bleeding edge version of fosscord-server, which may have bugs. You need to install git from git-scm.com or your package manager. You need to install nodejs version 14 or higher from nodejs.org or your package manager. Now you can clone and start the server by executing this in the terminal/shell: git clone https://github.com/fosscord/fosscord-server cd fosscord-server cd bundle npm run setup npm run start:bundle You can now access it on http://localhost:3001 To update it run (notice will discard all changed files): git reset --hard HEAD git pull npm run setup npm run start:bundle With Docker Not Supported Currently Avoid using Docker build until further notice. The current build is faulty and will not build correctly. Instead, install using the terminal in the section \"With Terminal\". Optionally if you want to use Docker: git clone https://github.com/fosscord/fosscord-server cd fosscord-server docker-compose up You can now access it on http://localhost:3001 Configuration For an always up to date version of the currently available configuration options use Config.ts . Name Type Default Description gateway_endpointClient string null The gateway endpoint that gets delivered to the client gateway_endpointPrivate string null The gateway endpoint that is used internally to communicate between gateway servers gateway_endpointPublic string null The gateway endpoint that is publicly used by bots cdn_endpointPublic string \"/\" The cdn endpoint that is served in message attachments cdn_endpointClient string null The cdn endpoint that is used by clients cdn_endpointPrivate string \"http://localhost:3001\" The cdn endpoint that is used internally to upload images from the api to the cdn. general_instanceId string auto generated Unique identifier for the Fosscord instance limits_user_maxGuilds number 100 Maximum number of guilds the user is allowed to create and join limits_user_maxUsername number 32 Maximum number of characters for a username limits_user_maxFriends number 1000 Maximum number of friends a user can have limits_guild_maxRoles number 250 Maximum number of roles a guild can have limits_guild_maxEmojis number 50 Maximum number of custom emojis a guild can have limits_guild_maxMembers number 250000 Maximum number of members a guild can have limits_guild_maxChannels number 50 Maximum number of channels a guild can have limits_guild_maxChannelsInCategory number 50 Maximum number of channels a category can contain limits_guild_hideOfflineMember number 1000 Amount of members when a guild is considered large and offline members are hidden limits_message_maxCharacters number 2000 Maximum length of characters a message can have limits_message_maxTTSCharacters number 200 Maximum length of characters a text to speech message can have limits_message_maxReactions number 20 Maximum number of reactions a message can have limits_message_maxAttachmentSize number 8388608 Maximum size a message attachment can have in bytes limits_message_maxBulkDelete number 100 Maximum amount of messages that can be deleted per bulk delete command limits_channel_maxPins number 50 Maximum amount of pinned messages a channel can have limits_channel_maxTopic number 1024 Maximum amount of characters a channel topic description can have limits_channel_maxWebhooks number 10 Maximum amount of webhooks a channel can have limits_rate_disabled boolean false Check to enable rate limits limits_rate_ TODO security_autoUpdate boolean true Check if updates should automatically be searched for and non destructively be installed security_requestSignature string auto generated Request signature that is used internally to sign requests security_jwtSecret string auto generated JSON web token secret to sign and verify jwt tokens security_forwardedFor string null Header name that is used to retrieve the real ip of a request e.g. X-Forwarded-For or CF-Connecting-IP security_captcha_enabled boolean false Check to enable captchas security_captcha_service string null Captcha provider, one of: \"recaptcha\", \"hcaptcha\" security_captcha_sitekey string null Captcha provider site key security_captcha_secret string null Captcha provider secret to check if the user supplied captcha result is correct security_ipdataApiKey string public key IPdata.co api key to check if a register ip address is using proxies login_requireCaptcha boolean false Check to require captchas to login","title":"Server"},{"location":"setup/server/#server","text":"","title":"Server"},{"location":"setup/server/#setup","text":"","title":"Setup"},{"location":"setup/server/#download","text":"This is the stable fosscord-server release. Download the server release from GitHub for your operating system. (Size ~80mb) Double click the file to start the server. (The first time it takes longer as it needs to setup the server) You can now access it on http://localhost:3001 .","title":"Download"},{"location":"setup/server/#with-terminal","text":"This is the latest bleeding edge version of fosscord-server, which may have bugs. You need to install git from git-scm.com or your package manager. You need to install nodejs version 14 or higher from nodejs.org or your package manager. Now you can clone and start the server by executing this in the terminal/shell: git clone https://github.com/fosscord/fosscord-server cd fosscord-server cd bundle npm run setup npm run start:bundle You can now access it on http://localhost:3001 To update it run (notice will discard all changed files): git reset --hard HEAD git pull npm run setup npm run start:bundle","title":"With terminal"},{"location":"setup/server/#with-docker","text":"Not Supported Currently Avoid using Docker build until further notice. The current build is faulty and will not build correctly. Instead, install using the terminal in the section \"With Terminal\". Optionally if you want to use Docker: git clone https://github.com/fosscord/fosscord-server cd fosscord-server docker-compose up You can now access it on http://localhost:3001","title":"With Docker"},{"location":"setup/server/#configuration","text":"For an always up to date version of the currently available configuration options use Config.ts . Name Type Default Description gateway_endpointClient string null The gateway endpoint that gets delivered to the client gateway_endpointPrivate string null The gateway endpoint that is used internally to communicate between gateway servers gateway_endpointPublic string null The gateway endpoint that is publicly used by bots cdn_endpointPublic string \"/\" The cdn endpoint that is served in message attachments cdn_endpointClient string null The cdn endpoint that is used by clients cdn_endpointPrivate string \"http://localhost:3001\" The cdn endpoint that is used internally to upload images from the api to the cdn. general_instanceId string auto generated Unique identifier for the Fosscord instance limits_user_maxGuilds number 100 Maximum number of guilds the user is allowed to create and join limits_user_maxUsername number 32 Maximum number of characters for a username limits_user_maxFriends number 1000 Maximum number of friends a user can have limits_guild_maxRoles number 250 Maximum number of roles a guild can have limits_guild_maxEmojis number 50 Maximum number of custom emojis a guild can have limits_guild_maxMembers number 250000 Maximum number of members a guild can have limits_guild_maxChannels number 50 Maximum number of channels a guild can have limits_guild_maxChannelsInCategory number 50 Maximum number of channels a category can contain limits_guild_hideOfflineMember number 1000 Amount of members when a guild is considered large and offline members are hidden limits_message_maxCharacters number 2000 Maximum length of characters a message can have limits_message_maxTTSCharacters number 200 Maximum length of characters a text to speech message can have limits_message_maxReactions number 20 Maximum number of reactions a message can have limits_message_maxAttachmentSize number 8388608 Maximum size a message attachment can have in bytes limits_message_maxBulkDelete number 100 Maximum amount of messages that can be deleted per bulk delete command limits_channel_maxPins number 50 Maximum amount of pinned messages a channel can have limits_channel_maxTopic number 1024 Maximum amount of characters a channel topic description can have limits_channel_maxWebhooks number 10 Maximum amount of webhooks a channel can have limits_rate_disabled boolean false Check to enable rate limits limits_rate_ TODO security_autoUpdate boolean true Check if updates should automatically be searched for and non destructively be installed security_requestSignature string auto generated Request signature that is used internally to sign requests security_jwtSecret string auto generated JSON web token secret to sign and verify jwt tokens security_forwardedFor string null Header name that is used to retrieve the real ip of a request e.g. X-Forwarded-For or CF-Connecting-IP security_captcha_enabled boolean false Check to enable captchas security_captcha_service string null Captcha provider, one of: \"recaptcha\", \"hcaptcha\" security_captcha_sitekey string null Captcha provider site key security_captcha_secret string null Captcha provider secret to check if the user supplied captcha result is correct security_ipdataApiKey string public key IPdata.co api key to check if a register ip address is using proxies login_requireCaptcha boolean false Check to require captchas to login","title":"Configuration"}]}